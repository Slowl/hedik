---
import PagePreviewLayout from '@/layouts/Sections/PagePreview/index.astro';
import ProjectCard from '@/components/Cards/Project/index.astro';
import { githubReposUrl } from '@/data/github';
import type { DataRepository } from '@/types/index';
import { useFetch } from '@/utils/index';

let repositories: DataRepository[] | null;
try {
	const request = await useFetch({ url: githubReposUrl, params: '?sort=created&direction=desc&per_page=4' })
	if (request.data.message) {
		throw 'api rate limit exceeded'
	}
	repositories = request.data;
} catch {
	repositories = null;
}
---
<PagePreviewLayout title='projects' pageUrl='/projects' quantity={repositories?.length ?? 0}>
	{repositories && repositories.slice(0, 3).map((repository) => (
		<ProjectCard
			createdAt={repository.created_at}
			description={repository.description}
			name={repository.name}
			githubUrl={repository.html_url}
			isVisibleOnMount={false}
			language={repository.language}
			name={repository.name}
			websiteUrl={repository.homepage}
		/>
	))}
</PagePreviewLayout>

<script>
	import { ANIMATION_TYPE, animateElements } from '@/utils/index';

	const target = document.getElementById('preview-section-projects');
	const intersectionOptions = {
		root: null,
		rootMargin: '0px',
		threshold: .5,
	};

	const handleIntersection = (entries: IntersectionObserverEntry[]) => (
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				const cards = document.querySelectorAll('.animated-card-project');
				animateElements({ targets: cards, animationType: ANIMATION_TYPE.SLIDE_IN, delay: 200 });
			}
		})
	);

	const sectionObserver = new IntersectionObserver(handleIntersection, intersectionOptions);
	target && sectionObserver.observe(target);
</script>